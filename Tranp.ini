// script.js (HTMLの <script> タグ内に直接書いてもOKですが、ファイルに分けるのがおすすめです)

// カードのスートとランクの定義
const SUITS = ['s', 'h', 'd', 'c']; // スペード、ハート、ダイヤ、クラブ
const RANKS = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];

// 各カードのデータ (スプライトシート上の位置情報も含む)
const ALL_CARDS = [];
const CARD_WIDTH = 71; // スプライトシート上の1枚あたりのカードの幅 (px)
const CARD_HEIGHT = 96; // スプライトシート上の1枚あたりのカードの高さ (px)

SUITS.forEach((suit, suitIndex) => {
    RANKS.forEach((rank, rankIndex) => {
        ALL_CARDS.push({
            id: rank + suit, // 例: 'As', 'Kh'
            rank: rank,
            suit: suit,
            // スプライトシート上の背景位置 (CSSの background-position 用)
            bgX: -rankIndex * CARD_WIDTH,
            bgY: -suitIndex * CARD_HEIGHT
        });
    });
});

console.log(ALL_CARDS); // コンソールで生成されたカードデータを確認できます

// script.js の ALL_CARDS 定義の続き、または新しい script.js ファイルの冒頭

// カードの表示と選択に関連するHTML要素のID
const cardGridIds = {
    hero: 'hero-card-grid',
    flop: 'flop-card-grid',
    turn: 'turn-card-grid',
    river: 'river-card-grid'
};

const selectedCardsDisplayIds = {
    hero: 'hero-selected-cards-display',
    flop: 'flop-selected-cards-display',
    turn: 'turn-selected-cards-display',
    river: 'river-selected-cards-display'
};

// スプライトシートの画像パス (publicdomainq-0054833vgi.jpg を images フォルダに置いた場合)
const SPRITESHEET_PATH = 'images/publicdomainq-0054833vgi.jpg';

// カードを生成して指定されたグリッドに追加する関数
function renderCardGrid(gridElementId) {
    const gridElement = document.getElementById(gridElementId);
    if (!gridElement) {
        console.error(`Grid element with ID ${gridElementId} not found.`);
        return;
    }

    gridElement.innerHTML = ''; // 既存のサンプルカードをクリア

    ALL_CARDS.forEach(card => {
        const cardDiv = document.createElement('div');
        cardDiv.classList.add('card-sprite'); // 後でCSSでスタイルを定義
        cardDiv.dataset.cardId = card.id; // JavaScriptでカードを識別するためのID

        // スプライトシートの背景位置を設定
        cardDiv.style.width = `${CARD_WIDTH}px`;
        cardDiv.style.height = `${CARD_HEIGHT}px`;
        cardDiv.style.backgroundImage = `url(${SPRITESHEET_PATH})`;
        cardDiv.style.backgroundPosition = `${card.bgX}px ${card.bgY}px`;
        cardDiv.style.backgroundRepeat = 'no-repeat';
        cardDiv.style.cursor = 'pointer';
        cardDiv.style.borderRadius = '4px'; // 角を丸く
        cardDiv.style.border = '1px solid transparent'; // デフォルトのボーダー

        // ホバー時のスタイル (Tailwindのhover:bg-purple-600の代わりにCSSで直接指定)
        cardDiv.addEventListener('mouseenter', () => {
            if (!cardDiv.classList.contains('selected') && !cardDiv.classList.contains('disabled')) {
                cardDiv.style.borderColor = '#9333ea'; // purple-600
            }
        });
        cardDiv.addEventListener('mouseleave', () => {
            if (!cardDiv.classList.contains('selected') && !cardDiv.classList.contains('disabled')) {
                cardDiv.style.borderColor = 'transparent';
            }
        });


        // Tailwind CSSの grid-cols-13 の間隔を調整するためのマージン (オプション)
        // cardDiv.style.marginBottom = '4px';
        // cardDiv.style.marginRight = '4px'; // 最後の列を除く

        gridElement.appendChild(cardDiv);
    });
}

// ページロード時にカードグリッドをレンダリング
document.addEventListener('DOMContentLoaded', () => {
    // Heroの手札用グリッドをレンダリング
    renderCardGrid(cardGridIds.hero);
    // フロップ用グリッドをレンダリング
    renderCardGrid(cardGridIds.flop);
    // ターン用グリッドをレンダリング
    renderCardGrid(cardGridIds.turn);
    // リバー用グリッドをレンダリング
    renderCardGrid(cardGridIds.river);

    // 以降、カード選択ロジックなどを追加していきます
});